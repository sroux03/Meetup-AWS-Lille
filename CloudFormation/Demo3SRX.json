
  "Resources": {
    
    "MyApacheNode1Server" : {
        "Type" : "AWS::EC2::Instance",
        "Metadata" : {
        	"Comment1" : "Installs apache2 on node 1 and gets index.html from S3 bucket",
		"AWS::CloudFormation::Init" : {
			"configSets" : {
				"InstallAndConfigureNode1" : [ "Install1stMethod","ConfigureNode1" ]
			},
			"Install1stMethod" : {
				"commands" : {
              				"Install_Apache1" : {
                				"command" : "yum install -y httpd"
					}
				}
			},
			"ConfigureNode1" : {
				"commands" : {
              				"cp_node1_index.html_from_s3" : {
                				"command" : "wget -O //var/www/html/index.html https://s3-eu-west-1.amazonaws.com/meetupawslille/CloudFormation/node1_index.html"
					},
					"start_httpd" : {
						"command" : "service httpd start"
					}
				},
				"services" : {
					"httpd"   : { "enabled" : "true", "ensureRunning" : "true" }
				}
			}		
		}
	},
	"Properties" : {
		"KeyName" : "defaultSRX",
        	"InstanceType" : "t2.micro",
	    	"SubnetId" : "subnet-77829900",
       		"ImageId"  : "ami-e1398992",
        	"SecurityGroupIds" : ["sg-e2d9d486"],
			"Tags" : [{ "Key" : "Name", "Value" : "MyApacheNode1Server" }, { "Key" : "Role", "Value" : "TestServer" }, 
			       { "Key" : "Zone", "Value" : "default" },{ "Key" : "VPC", "Value" : "default" }],
            "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                                                                          "#!/bin/bash -xe\n",
									  "yum update -y aws-cfn-bootstrap\n",
									  "/opt/aws/bin/cfn-init ",
          								  "         --stack ", { "Ref" : "AWS::StackName" },
                                                                          "         --resource MyApacheNode1Server",
          								  "         --configsets InstallAndConfigureNode1",
          								  "         --region ", { "Ref" : "AWS::Region" }, "\n"
							           ]]
					}
		}
	}
   },
   "MyApacheNode2Server" : {
        "Type" : "AWS::EC2::Instance",
        "Metadata" : {
        	"Comment2" : "Installs apache2 on node 2 and gets index.html from S3 bucket",
		"AWS::CloudFormation::Init" : {
			"configSets" : {
				"InstallAndConfigureNode2" : [ "Install2ndMethod","ConfigureNode2" ]
			},
			"Install2ndMethod" : {
				"packages" : {
					"yum" : {
						"httpd"        : []
					}
				}
			},
			"ConfigureNode2" : {
				"commands" : {
              				"cp_node2_index.html_from_s3" : {
                				"command" : "wget -O //var/www/html/index.html https://s3-eu-west-1.amazonaws.com/meetupawslille/CloudFormation/node2_index.html"
					},
					"start_httpd2" : {
						"command" : "service httpd start"
					}
				},
				"services" : {
					"httpd"   : { "enabled" : "true", "ensureRunning" : "true" }
				}
			}		
		}
	},
	"Properties" : {
		"KeyName" : "defaultSRX",
        	"InstanceType" : "t2.micro",
	    	"SubnetId" : "subnet-77829900",
       		"ImageId"  : "ami-e1398992",
        	"SecurityGroupIds" : ["sg-e2d9d486"],
		"Tags" : [{ "Key" : "Name", "Value" : "MyApacheNode2Server" }, { "Key" : "Role", "Value" : "TestServer" }, 
			       { "Key" : "Zone", "Value" : "default" },{ "Key" : "VPC", "Value" : "default" }],
                "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                                                                          "#!/bin/bash -xe\n",
									  "yum update -y aws-cfn-bootstrap\n",
									  "/opt/aws/bin/cfn-init ",
          								  "         --stack ", { "Ref" : "AWS::StackName" },
                                                                          "         --resource MyApacheNode2Server",
          								  "         --configsets InstallAndConfigureNode2",
          								  "         --region ", { "Ref" : "AWS::Region" }, "\n"
							           ]]
					}
		}
	}
   },
   "SGELB1" : {
	"Type" : "AWS::EC2::SecurityGroup",
	"Properties" : {
		"GroupDescription" : "Security group for LB",
		"VpcId" : "vpc-d1e290b4",
        	"SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80", "CidrIp" : "0.0.0.0/0"}],
		"SecurityGroupEgress" : [ { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80", "CidrIp" :  "0.0.0.0/0" }],
		"Tags" : [{ "Key" : "Name", "Value" : "SG-ELB1" }, { "Key" : "Zone", "Value" : "default" },{ "Key" : "VPC", "Value" : "default" }]
      }
    },
    "ELB1" : {
 		"Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
 		"DependsOn" : [ "MyApacheNode1Server", "MyApacheNode2Server" ],
 		"Properties" : {
   			"Scheme" : "internet-facing",
   			"SecurityGroups" : [ { "Ref" : "SGELB1" } ],
			"Subnets" :  ["subnet-77829900"],
   			"Instances" : [ { "Ref" : "MyApacheNode1Server" },{ "Ref" : "MyApacheNode2Server" }],
   			"LoadBalancerName" : "ELB1",
   			"Listeners" : [ {
						"LoadBalancerPort" : "80",
						"InstancePort" : "80",
						"Protocol" : "HTTP"
   			} ],
   			"HealthCheck" : {
     				"Target" : "HTTP:80/",
     				"HealthyThreshold" : "3",
     				"UnhealthyThreshold" : "5",
     				"Interval" : "30",
     				"Timeout" : "5"
   			},
   			"Tags" : [{ "Key" : "Name", "Value" : "ELB1" }, { "Key" : "Zone", "Value" : "default" },{ "Key" : "VPC", "Value" : "default" }]
 		}
	},
        "ElasticIPAssociation" : {
        	"Type": "AWS::EC2::EIPAssociation",
        	"Properties": {
                	"AllocationId": "eipalloc-ac7712c9",
                	"InstanceId":{ "Ref" : "MyApacheNode1Server" }
        	}
	}

 }
}

